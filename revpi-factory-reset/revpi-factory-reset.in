#!/bin/bash
#
# SPDX-License-Identifier: GPL-2.0-or-later
#
# SPDX-FileCopyrightText: 2017-2025 KUNBUS GmbH
#
# reset dtoverlay, password of user pi, machine-id, hostname, FQDN and
# MAC address of a RevPi to factory defaults

: ${DATADIR='@DATADIR@'}
: ${SYSCONFDIR='@SYSCONFDIR@'}
: ${LIBDIR="$DATADIR"/revpi}

. "$LIBDIR"/revpi-functions

RPI_FW_MOUNT="$ROOT"/boot/firmware
HOSTNAME_PREFIX_FILE="$DATADIR/revpi/hostname"

HOSTNAME_PREFIX="RevPi"

usage() {
	cat <<- __EOF__
	Usage: revpi-factory-reset
	       revpi-factory-reset OVERLAY SERIAL_NR MAC_ADDR

	Calling revpi-factory-reset without any arguments is only permitted if the
	device it is called on is equipped with a HAT EEPROM.
	__EOF__

	exit "$1"
}

while getopts "r:h" opt; do
	case "$opt" in
	r) ROOT="$OPTARG" ;;
	h) usage 0 ;;
	?) usage 1 >&2 ;;
	esac
done


if [ -f "$HOSTNAME_PREFIX_FILE" ]; then
	echo "Using custom hostname prefix from $HOSTNAME_PREFIX_FILE"
	HOSTNAME_PREFIX="$(head -n1 "$HOSTNAME_PREFIX_FILE")"

	if echo "$HOSTNAME_PREFIX" | grep -Eq "[[:space:]]"; then
		echo 1>&2 "Hostname prefix '$HOSTNAME_PREFIX' contains invalid characters"
		exit 1
	fi
fi

echo "Using hostname prefix '$HOSTNAME_PREFIX'"

if [ -r  "$SYSCONFDIR"/revpi/factory-reset ] \
	|| [ -r "$ROOT"/home/pi/.revpi-factory-reset ]; then
	echo "revpi-factory-reset was already run on this device. Skipping."

	exit 0
fi

full_devicetype_list="compact|connect|core|flat|connect-se"	# all suported devices
if has_hat_eeprom; then
	# The device is equipped with HAT EEPROM
	with_hat_eeprom=true

	# Get the serial number from device tree according to document:
	# https://gitlab.com/revolutionpi/revpi-hat-eeprom/blob/master/docs/RevPi-HAT-EEPROM-Format.md#1-serial
	ser=$(cat "$ROOT"/proc/device-tree/hat/custom_1)
else
	with_hat_eeprom=false

	ovl="$1"
	ser="$2"
	mac="$3"
	mac="${mac,,}"		# downcase
	mac="${mac//-/}"	# remove dashes
	mac="${mac//:/}"	# remove colons

	witheth1_devicetype_list="compact|connect|flat|connect-se"	# devices with "eth1"

	if [ "$#" != 3 ] ||
	! [[ "$ovl" =~ ^($full_devicetype_list)$ ]] ||
	! [[ "$ser" =~ ^[0-9]+$ ]] ||
	! [[ "$mac" =~ ^[0-9a-f]{12}$ ]] ; then
		echo -e 1>&2 "Usage: $(basename "$0") <$full_devicetype_list> <serial> <mac addr>\n(see front plate)"
		exit 1
	fi

	if [ "$ovl" = "core" ]; then
		if cm1_detection; then
			echo "Compute Module 1 has been detected, core-cm1-overlay will be used"
			echo "automatically."
			ovl="core-cm1"
		fi
	fi
fi

if [ "$(id -u)" != 0 ] ; then
	echo 1>&2 "This program requires root access"
	exit 1
fi

piserial="piSerial"
sed --follow-symlinks -r -i -e "/^dtoverlay=revpi-($full_devicetype_list)/d" "$RPI_FW_MOUNT/config.txt"

if ! "$with_hat_eeprom"; then
	echo "dtoverlay=revpi-$ovl" >> "$RPI_FW_MOUNT/config.txt"
	dtoverlay "revpi-$ovl"
	cp "$RPI_FW_MOUNT/overlays/revpi-$ovl-dt-blob.dtbo" "$RPI_FW_MOUNT/dt-blob.bin" 2>/dev/null

	if [ "$ovl" == flat ]; then
		# wait for dtoverlay revpi-flat, and tpm modules get probed
		wait_time=60
		echo -n "Wait for tpm chip to become ready. Fail if the chip is not available after $wait_time seconds"
		for (( i=1; i<=wait_time; i++ ))
		do
			if [ "$i" = "$wait_time" ]; then
				echo 1>&2 "Timeout while waiting for the TPM chip to become ready"
				echo 1>&2 "The factory reset is stopped here!"
				exit 1
			fi
			if [ -c /dev/tpm0 ]; then
				echo " ok"
				break
			fi
			echo -n "."
			sleep 1
		done
	fi
fi

if user_pi_exists; then
	pw="$("$piserial" -p)"
	echo -e "Password:\t$pw"
	echo "pi:${pw}" | chpasswd
else
	echo 1>&2 "WARNING: Cannot restore the default password, because the default user 'pi' is absent."
fi

hostname="$HOSTNAME_PREFIX$ser"
echo -e "Hostname:\t$hostname"
sed --follow-symlinks -r -i -e "s/^(127\.0\.1\.1[[:blank:]]+).*/\1$hostname/" "$ROOT"/etc/hosts
echo "$hostname" > "$ROOT"/etc/hostname
$MOCK hostname "$hostname"

# remove existing entries before writing new ones
sed --follow-symlinks -r -i -e "/^dtparam=eth[0-9]_mac_/d" "$RPI_FW_MOUNT/config.txt"
if ! "$with_hat_eeprom"; then
	mac_hi="${mac:0:2}${mac:2:2}${mac:4:2}${mac:6:2}"
	mac_lo="${mac:8:2}${mac:10:2}"
	echo -e "MAC Address eth0:\t$mac_hi$mac_lo"
	echo "dtparam=eth0_mac_hi=0x${mac_hi}" >> "$RPI_FW_MOUNT/config.txt"
	echo "dtparam=eth0_mac_lo=0x${mac_lo}" >> "$RPI_FW_MOUNT/config.txt"

	if [[ "$ovl" =~ ^($witheth1_devicetype_list)$ ]] ; then
		mac_lo1=$(( 0x${mac_lo} + 1))
		mac_lo1=$(printf "%.4hx" "${mac_lo1}")
		echo -e "MAC Address eth1:\t$mac_hi$mac_lo1"
		echo "dtparam=eth1_mac_hi=0x${mac_hi}" >> "$RPI_FW_MOUNT/config.txt"
		echo "dtparam=eth1_mac_lo=0x${mac_lo1}" >> "$RPI_FW_MOUNT/config.txt"
		if [[ "$ovl" =~ ^compact$ ]] ; then
			ks8851-set-mac eth1 "$mac_hi$mac_lo1"
		fi
	fi

	echo "Reboot to activate the MAC Address"
fi
echo "Be sure to write down the password if you have lost the sticker"
echo "on your RevPi!"

# skip /etc/profile.d/revpi-factory-reset.sh on future logins
true > "$SYSCONFDIR/revpi/factory-reset"

# Remove sudoers rule for revpi-factory-reset.
# Allows passwordless execution only on first boot.
rm -f "$SYSCONFDIR/sudoers.d/051_revpi-factory-reset"
